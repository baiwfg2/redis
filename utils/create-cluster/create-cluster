#!/bin/bash

# Settings
PORT=30000
TIMEOUT=2000
NODES=6
REPLICAS=1

# You may want to put the above config parameters into config.sh in order to
# override the defaults without modifying this script.

if [ -a config.sh ]
then
    source "config.sh"
fi

# Computed vars
ENDPORT=$((PORT+NODES))
HOST=127.0.0.1

if [ "$1" == "start" ]
then
	echo "Deleting existed intermidiate files"
	rm -rf nodes* dump* *.log
    while [ $((PORT < ENDPORT)) != "0" ]; do
        PORT=$((PORT+1))
        echo "Starting $PORT"
        ../../src/redis-server --port $PORT --cluster-enabled yes --cluster-config-file nodes-${PORT}.conf --cluster-node-timeout $TIMEOUT --dbfilename dump-${PORT}.rdb --logfile ${PORT}.log --daemonize yes
    done
    exit 0
fi

if [ "$1" == "create" ]
then
    HOSTS=""
    while [ $((PORT < ENDPORT)) != "0" ]; do
        PORT=$((PORT+1))
        HOSTS="$HOSTS $HOST:$PORT"
    done
    echo yes | ../../src/redis-trib.rb create --replicas $REPLICAS $HOSTS
    exit 0
fi

if [ "$1" == "kill" ]; then
	if [ "x$2" == "x" ]; then
		echo "No port specified"
		exit 1
	fi
	pid=`netstat -tlnup | grep "$2" | awk '{print $7}' | cut -d '/' -f1`
	#rm -f nodes-$2.conf # DO NOT do this !
	kill $pid
fi

if [ "$1" == "restart" ]; then
	if [ "x$2" == "x" ]; then
		echo "No port specified"
		exit 1
	fi
	port=$2
	../../src/redis-cli -h $HOST -p $port ping
	if [ $? = 0 ];then echo "$port is alive";exit 0; fi

	master_port=""
	run_id=""
	if [ $(($port<30004)) != 0 ];then
		master_port=$((port+3))
	else
		master_port=$((port-3))
	fi

	p=30000
	while [ $((p < ENDPORT)) != 0 ];do
		p=$((p+1))
		../../src/redis-cli -h $HOST -p $p ping
		if [ $? = 0 ]; then
			run_id=`../../src/redis-cli -h $HOST -p $p cluster nodes | grep "$master_port" | cut -d ' ' -f1`
			break
		fi
	done
	../../src/redis-server --port $port --cluster-enabled yes --cluster-config-file nodes-${port}.conf --cluster-node-timeout $TIMEOUT --dbfilename dump-${port}.rdb --logfile ${port}.log --daemonize yes
	../../src/redis-trib.rb add-node $HOST:$port $HOST:$master_port
	
	# replicate from original slave whose port is 'port + 3' or 'port - 3'
	../../src/redis-cli -h $HOST -p $port cluster replicate $run_id
fi

if [ "$1" == "stop" ]
then
	rm -rf nodes* dump* *.log
    while [ $((PORT < ENDPORT)) != "0" ]; do
        PORT=$((PORT+1))
        echo "Stopping $PORT"
        ../../src/redis-cli $HOST -p $PORT shutdown nosave
    done
    exit 0
fi

if [ "$1" == "watch" ]
then
    PORT=$((PORT+1))
    while [ 1 ]; do
        clear
        date
        ../../src/redis-cli -h $HOST -p $PORT cluster nodes | head -30
        sleep 1
    done
    exit 0
fi

if [ "$1" == "tail" ]
then
    INSTANCE=$2
    PORT=$((PORT+INSTANCE))
    tail -f ${PORT}.log
    exit 0
fi

if [ "$1" == "call" ]
then
    while [ $((PORT < ENDPORT)) != "0" ]; do
        PORT=$((PORT+1))
        ../../src/redis-cli -h $HOST -p $PORT $2 $3 $4 $5 $6 $7 $8 $9
    done
    exit 0
fi

if [ "$1" == "clean" ]
then
    rm -rf *.log
    rm -rf appendonly*.aof
    rm -rf dump*.rdb
    rm -rf nodes*.conf
    exit 0
fi

if [ "$1" == "clean-logs" ]
then
    rm -rf *.log
    exit 0
fi

echo "Usage: $0 [start|create|stop|watch|tail|clean]"
echo "start       -- Launch Redis Cluster instances."
echo "create      -- Create a cluster using redis-trib create."
echo "stop        -- Stop Redis Cluster instances."
echo "watch       -- Show CLUSTER NODES output (first 30 lines) of first node."
echo "tail <id>   -- Run tail -f of instance at base port + ID."
echo "clean       -- Remove all instances data, logs, configs."
echo "clean-logs  -- Remove just instances logs."
